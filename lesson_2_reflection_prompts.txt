What happens when you initialize a repository? Why do you need to do it?
A directory becomes a repository. The repo is created no commit is automatically made. It creates hidden .git folder to keep all the git logs.
When I run git init git starts tracking changes of the folders and enables me to do commits.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

It allows me to choose which changes in which files to commit. It is different from repo because it contains the current changes made from the checked out commit. And it is different from the working directory because it is from git’s side.

How can you use the staging area to make sure you have one commit per logical
change?
I can make sure all changes are committed before starting working on a new logical change. Then, I can add files that are a part of 1 logical change to the staging area once they are modified to work with the recent change. Once all the files that my change is touching are changed and add to staging area I can commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
When I create experimental change or make a full copy of my game with a change I want to keep, like a new version of the code (for a separate simulation, say)

How do the diagrams help you visualize the branch structure?
Diagrams make it easy to see the tree-like structure of the git branches, see from which parent a new branch was created and therefore to see what changes in the master branch the new branch does not have.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git’s automatic merging vs. always doing merges
manually?
Allows you to decide when the new branch is ready to merge. Also allows you to review the changes in the code.

Main functions to take away:
git log --graph --oneline

git merge master coins //merge branch with master
git branch -d coins //delete branch label 